       __
       \ \
  ___   \ \
  ___    . \
  ___   / ^ \
       /_/ \_\

Unbounded, a Lambda Calculus interpreter

Usage: unbounded [-h] [-q | -v] [-e 'expression']

Default operation is to evaluate expressions in an interactive REPL.  End of input is system defined.  

  -h                prints this help message.
  -q                run quietly.
  -v                verbose tracing.
  -e 'expression'   evaluate the expression in non-interactive mode.

Unbounded> 
-> # -------------------------------                                                
Unbounded> 
-> # REPL_Tests                                                                     
Unbounded> 
-> # -------------------------------                                                
Unbounded> 
-> # Test cases for the REPL interpreter                                            
Unbounded> 
-> #                                                                                
Unbounded> 
. Trace on
Unbounded> 
. Trace on - PARSE
Unbounded> 
. Trace off
Unbounded> 
. Trace off
Unbounded> 
. Trace on - PARSE
Unbounded> 
. Trace on
Unbounded> 
. Trace on - PARSE - REDUCE - FORMAT
Unbounded> 
.. Parse #                                                                               
... P-#
... F-  [L_COMMENTS, '#', Is_Explicit=TRUE]
.. Reduce #                                                                                
... R-Optimise -> #                                                                                
... F-  [L_COMMENTS, '#', Is_Explicit=TRUE]
-> #                                                                                
Unbounded> 
.. Parse # Comments                                                                      
... P-#
... F-  [L_COMMENTS, '# Comments', Is_Explicit=TRUE]
.. Reduce # Comments                                                                       
... R-Optimise -> # Comments                                                                       
... F-  [L_COMMENTS, '# Comments', Is_Explicit=TRUE]
-> # Comments                                                                       
Unbounded> 
.. Parse # --------                                                                      
... P-#
... F-  [L_COMMENTS, '# --------', Is_Explicit=TRUE]
.. Reduce # --------                                                                       
... R-Optimise -> # --------                                                                       
... F-  [L_COMMENTS, '# --------', Is_Explicit=TRUE]
-> # --------                                                                       
Unbounded> 
.. Parse # Trailing comments                                                             
... P-#
... F-  [L_COMMENTS, '# Trailing comments', Is_Explicit=TRUE]
.. Reduce # Trailing comments                                                              
... R-Optimise -> # Trailing comments                                                              
... F-  [L_COMMENTS, '# Trailing comments', Is_Explicit=TRUE]
-> # Trailing comments                                                              
Unbounded> 
.. Parse asdf# Trailing comments                                                         
... P-Variable: a
... P-Variable: s
... P-Variable: d
... P-Variable: f
... P-#
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, s, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, f, Is_Explicit=TRUE]
... F-  [L_COMMENTS, '# Trailing comments', Is_Explicit=TRUE]
.. Reduce (asdf) # Trailing comments                                                              
... R-Optimise -> (asdf) # Trailing comments                                                              
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, s, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, f, Is_Explicit=TRUE]
... F-  [L_COMMENTS, '# Trailing comments', Is_Explicit=TRUE]
-> (asdf) # Trailing comments                                                              
Unbounded> 
.. Parse asdf # Trailing comments                                                        
... P-Variable: a
... P-Variable: s
... P-Variable: d
... P-Variable: f
... P-#
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, s, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, f, Is_Explicit=TRUE]
... F-  [L_COMMENTS, '# Trailing comments', Is_Explicit=TRUE]
.. Reduce (asdf) # Trailing comments                                                              
... R-Optimise -> (asdf) # Trailing comments                                                              
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, s, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, f, Is_Explicit=TRUE]
... F-  [L_COMMENTS, '# Trailing comments', Is_Explicit=TRUE]
-> (asdf) # Trailing comments                                                              
Unbounded> 
.. Parse asdf	# Trailing comments - tab                                                  
... P-Variable: a
... P-Variable: s
... P-Variable: d
... P-Variable: f
LAMBDA.SYNTAX_ERROR: Invalid character in asdf	# Trailing comments - tab
Unbounded> 
.. Parse asdf	  # Trailing comments - mixed                                              
... P-Variable: a
... P-Variable: s
... P-Variable: d
... P-Variable: f
LAMBDA.SYNTAX_ERROR: Invalid character in asdf	  # Trailing comments - mixed
Unbounded> 
.. Parse asdf #                                                                          
... P-Variable: a
... P-Variable: s
... P-Variable: d
... P-Variable: f
... P-#
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, s, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, f, Is_Explicit=TRUE]
... F-  [L_COMMENTS, '#', Is_Explicit=TRUE]
.. Reduce (asdf) #                                                                                
... R-Optimise -> (asdf) #                                                                                
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, s, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, f, Is_Explicit=TRUE]
... F-  [L_COMMENTS, '#', Is_Explicit=TRUE]
-> (asdf) #                                                                                
Unbounded> 
.. Parse # Empty line                                                                    
... P-#
... F-  [L_COMMENTS, '# Empty line', Is_Explicit=TRUE]
.. Reduce # Empty line                                                                     
... R-Optimise -> # Empty line                                                                     
... F-  [L_COMMENTS, '# Empty line', Is_Explicit=TRUE]
-> # Empty line                                                                     
Unbounded> 
.. Parse 
.. Reduce 
... R-Optimise -> 
-> 
Unbounded> 
.. Parse # Buffer overflow                                                               
... P-#
... F-  [L_COMMENTS, '# Buffer overflow', Is_Explicit=TRUE]
.. Reduce # Buffer overflow                                                                
... R-Optimise -> # Buffer overflow                                                                
... F-  [L_COMMENTS, '# Buffer overflow', Is_Explicit=TRUE]
-> # Buffer overflow                                                                
Unbounded> 
.. Parse abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-Variable: d
... P-Variable: e
... P-Variable: f
... P-Variable: g
... P-Variable: h
... P-Variable: i
... P-Variable: j
... P-Variable: k
... P-Variable: l
... P-Variable: m
... P-Variable: n
... P-Variable: o
... P-Variable: p
... P-Variable: q
... P-Variable: r
... P-Variable: s
... P-Variable: t
... P-Variable: u
... P-Variable: v
... P-Variable: w
... P-Variable: x
... P-Variable: y
... P-Variable: z
... P-Synonym: A
... P-Synonym: B
... P-Synonym: C
... P-Synonym: D
... P-Synonym: E
... P-Synonym: F
... P-Synonym: G
... P-Synonym: H
... P-Synonym: I
... P-Synonym: J
... P-Synonym: K
... P-Synonym: L
... P-Synonym: M
... P-Synonym: N
... P-Synonym: O
... P-Synonym: P
... P-Synonym: Q
... P-Synonym: R
... P-Synonym: S
... P-Synonym: T
... P-Synonym: U
... P-Synonym: V
... P-Synonym: W
... P-Synonym: X
... P-Synonym: Y
... P-Synonym: Z
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-Variable: d
... P-Variable: e
... P-Variable: f
... P-Variable: g
... P-Variable: h
... P-Variable: i
... P-Variable: j
... P-Variable: k
... P-Variable: l
... P-Variable: m
... P-Variable: n
... P-Variable: o
... P-Variable: p
... P-Variable: q
... P-Variable: r
... P-Variable: s
... P-Variable: t
... P-Variable: u
... P-Variable: v
... P-Variable: w
... P-Variable: x
... P-Variable: y
... P-Variable: z
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, e, Is_Explicit=TRUE]
... F-   [L_VARIABLE, f, Is_Explicit=TRUE]
... F-   [L_VARIABLE, g, Is_Explicit=TRUE]
... F-   [L_VARIABLE, h, Is_Explicit=TRUE]
... F-   [L_VARIABLE, i, Is_Explicit=TRUE]
... F-   [L_VARIABLE, j, Is_Explicit=TRUE]
... F-   [L_VARIABLE, k, Is_Explicit=TRUE]
... F-   [L_VARIABLE, l, Is_Explicit=TRUE]
... F-   [L_VARIABLE, m, Is_Explicit=TRUE]
... F-   [L_VARIABLE, n, Is_Explicit=TRUE]
... F-   [L_VARIABLE, o, Is_Explicit=TRUE]
... F-   [L_VARIABLE, p, Is_Explicit=TRUE]
... F-   [L_VARIABLE, q, Is_Explicit=TRUE]
... F-   [L_VARIABLE, r, Is_Explicit=TRUE]
... F-   [L_VARIABLE, s, Is_Explicit=TRUE]
... F-   [L_VARIABLE, t, Is_Explicit=TRUE]
... F-   [L_VARIABLE, u, Is_Explicit=TRUE]
... F-   [L_VARIABLE, v, Is_Explicit=TRUE]
... F-   [L_VARIABLE, w, Is_Explicit=TRUE]
... F-   [L_VARIABLE, x, Is_Explicit=TRUE]
... F-   [L_VARIABLE, y, Is_Explicit=TRUE]
... F-   [L_VARIABLE, z, Is_Explicit=TRUE]
... F-   [L_SYNONYM, A, Is_Explicit=TRUE]
... F-   [L_SYNONYM, B, Is_Explicit=TRUE]
... F-   [L_SYNONYM, C, Is_Explicit=TRUE]
... F-   [L_SYNONYM, D, Is_Explicit=TRUE]
... F-   [L_SYNONYM, E, Is_Explicit=TRUE]
... F-   [L_SYNONYM, F, Is_Explicit=TRUE]
... F-   [L_SYNONYM, G, Is_Explicit=TRUE]
... F-   [L_SYNONYM, H, Is_Explicit=TRUE]
... F-   [L_SYNONYM, I, Is_Explicit=TRUE]
... F-   [L_SYNONYM, J, Is_Explicit=TRUE]
... F-   [L_SYNONYM, K, Is_Explicit=TRUE]
... F-   [L_SYNONYM, L, Is_Explicit=TRUE]
... F-   [L_SYNONYM, M, Is_Explicit=TRUE]
... F-   [L_SYNONYM, N, Is_Explicit=TRUE]
... F-   [L_SYNONYM, O, Is_Explicit=TRUE]
... F-   [L_SYNONYM, P, Is_Explicit=TRUE]
... F-   [L_SYNONYM, Q, Is_Explicit=TRUE]
... F-   [L_SYNONYM, R, Is_Explicit=TRUE]
... F-   [L_SYNONYM, S, Is_Explicit=TRUE]
... F-   [L_SYNONYM, T, Is_Explicit=TRUE]
... F-   [L_SYNONYM, U, Is_Explicit=TRUE]
... F-   [L_SYNONYM, V, Is_Explicit=TRUE]
... F-   [L_SYNONYM, W, Is_Explicit=TRUE]
... F-   [L_SYNONYM, X, Is_Explicit=TRUE]
... F-   [L_SYNONYM, Y, Is_Explicit=TRUE]
... F-   [L_SYNONYM, Z, Is_Explicit=TRUE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, e, Is_Explicit=TRUE]
... F-   [L_VARIABLE, f, Is_Explicit=TRUE]
... F-   [L_VARIABLE, g, Is_Explicit=TRUE]
... F-   [L_VARIABLE, h, Is_Explicit=TRUE]
... F-   [L_VARIABLE, i, Is_Explicit=TRUE]
... F-   [L_VARIABLE, j, Is_Explicit=TRUE]
... F-   [L_VARIABLE, k, Is_Explicit=TRUE]
... F-   [L_VARIABLE, l, Is_Explicit=TRUE]
... F-   [L_VARIABLE, m, Is_Explicit=TRUE]
... F-   [L_VARIABLE, n, Is_Explicit=TRUE]
... F-   [L_VARIABLE, o, Is_Explicit=TRUE]
... F-   [L_VARIABLE, p, Is_Explicit=TRUE]
... F-   [L_VARIABLE, q, Is_Explicit=TRUE]
... F-   [L_VARIABLE, r, Is_Explicit=TRUE]
... F-   [L_VARIABLE, s, Is_Explicit=TRUE]
... F-   [L_VARIABLE, t, Is_Explicit=TRUE]
... F-   [L_VARIABLE, u, Is_Explicit=TRUE]
... F-   [L_VARIABLE, v, Is_Explicit=TRUE]
... F-   [L_VARIABLE, w, Is_Explicit=TRUE]
... F-   [L_VARIABLE, x, Is_Explicit=TRUE]
... F-   [L_VARIABLE, y, Is_Explicit=TRUE]
... F-   [L_VARIABLE, z, Is_Explicit=TRUE]
.. Reduce (abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)
... R-Optimise -> (abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, e, Is_Explicit=TRUE]
... F-   [L_VARIABLE, f, Is_Explicit=TRUE]
... F-   [L_VARIABLE, g, Is_Explicit=TRUE]
... F-   [L_VARIABLE, h, Is_Explicit=TRUE]
... F-   [L_VARIABLE, i, Is_Explicit=TRUE]
... F-   [L_VARIABLE, j, Is_Explicit=TRUE]
... F-   [L_VARIABLE, k, Is_Explicit=TRUE]
... F-   [L_VARIABLE, l, Is_Explicit=TRUE]
... F-   [L_VARIABLE, m, Is_Explicit=TRUE]
... F-   [L_VARIABLE, n, Is_Explicit=TRUE]
... F-   [L_VARIABLE, o, Is_Explicit=TRUE]
... F-   [L_VARIABLE, p, Is_Explicit=TRUE]
... F-   [L_VARIABLE, q, Is_Explicit=TRUE]
... F-   [L_VARIABLE, r, Is_Explicit=TRUE]
... F-   [L_VARIABLE, s, Is_Explicit=TRUE]
... F-   [L_VARIABLE, t, Is_Explicit=TRUE]
... F-   [L_VARIABLE, u, Is_Explicit=TRUE]
... F-   [L_VARIABLE, v, Is_Explicit=TRUE]
... F-   [L_VARIABLE, w, Is_Explicit=TRUE]
... F-   [L_VARIABLE, x, Is_Explicit=TRUE]
... F-   [L_VARIABLE, y, Is_Explicit=TRUE]
... F-   [L_VARIABLE, z, Is_Explicit=TRUE]
... F-   [L_SYNONYM, A, Is_Explicit=TRUE]
... F-   [L_SYNONYM, B, Is_Explicit=TRUE]
... F-   [L_SYNONYM, C, Is_Explicit=TRUE]
... F-   [L_SYNONYM, D, Is_Explicit=TRUE]
... F-   [L_SYNONYM, E, Is_Explicit=TRUE]
... F-   [L_SYNONYM, F, Is_Explicit=TRUE]
... F-   [L_SYNONYM, G, Is_Explicit=TRUE]
... F-   [L_SYNONYM, H, Is_Explicit=TRUE]
... F-   [L_SYNONYM, I, Is_Explicit=TRUE]
... F-   [L_SYNONYM, J, Is_Explicit=TRUE]
... F-   [L_SYNONYM, K, Is_Explicit=TRUE]
... F-   [L_SYNONYM, L, Is_Explicit=TRUE]
... F-   [L_SYNONYM, M, Is_Explicit=TRUE]
... F-   [L_SYNONYM, N, Is_Explicit=TRUE]
... F-   [L_SYNONYM, O, Is_Explicit=TRUE]
... F-   [L_SYNONYM, P, Is_Explicit=TRUE]
... F-   [L_SYNONYM, Q, Is_Explicit=TRUE]
... F-   [L_SYNONYM, R, Is_Explicit=TRUE]
... F-   [L_SYNONYM, S, Is_Explicit=TRUE]
... F-   [L_SYNONYM, T, Is_Explicit=TRUE]
... F-   [L_SYNONYM, U, Is_Explicit=TRUE]
... F-   [L_SYNONYM, V, Is_Explicit=TRUE]
... F-   [L_SYNONYM, W, Is_Explicit=TRUE]
... F-   [L_SYNONYM, X, Is_Explicit=TRUE]
... F-   [L_SYNONYM, Y, Is_Explicit=TRUE]
... F-   [L_SYNONYM, Z, Is_Explicit=TRUE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, e, Is_Explicit=TRUE]
... F-   [L_VARIABLE, f, Is_Explicit=TRUE]
... F-   [L_VARIABLE, g, Is_Explicit=TRUE]
... F-   [L_VARIABLE, h, Is_Explicit=TRUE]
... F-   [L_VARIABLE, i, Is_Explicit=TRUE]
... F-   [L_VARIABLE, j, Is_Explicit=TRUE]
... F-   [L_VARIABLE, k, Is_Explicit=TRUE]
... F-   [L_VARIABLE, l, Is_Explicit=TRUE]
... F-   [L_VARIABLE, m, Is_Explicit=TRUE]
... F-   [L_VARIABLE, n, Is_Explicit=TRUE]
... F-   [L_VARIABLE, o, Is_Explicit=TRUE]
... F-   [L_VARIABLE, p, Is_Explicit=TRUE]
... F-   [L_VARIABLE, q, Is_Explicit=TRUE]
... F-   [L_VARIABLE, r, Is_Explicit=TRUE]
... F-   [L_VARIABLE, s, Is_Explicit=TRUE]
... F-   [L_VARIABLE, t, Is_Explicit=TRUE]
... F-   [L_VARIABLE, u, Is_Explicit=TRUE]
... F-   [L_VARIABLE, v, Is_Explicit=TRUE]
... F-   [L_VARIABLE, w, Is_Explicit=TRUE]
... F-   [L_VARIABLE, x, Is_Explicit=TRUE]
... F-   [L_VARIABLE, y, Is_Explicit=TRUE]
... F-   [L_VARIABLE, z, Is_Explicit=TRUE]
-> (abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz)
Unbounded> 
.. Parse # Expressions                                                                   
... P-#
... F-  [L_COMMENTS, '# Expressions', Is_Explicit=TRUE]
.. Reduce # Expressions                                                                    
... R-Optimise -> # Expressions                                                                    
... F-  [L_COMMENTS, '# Expressions', Is_Explicit=TRUE]
-> # Expressions                                                                    
Unbounded> 
.. Parse # -----------                                                                   
... P-#
... F-  [L_COMMENTS, '# -----------', Is_Explicit=TRUE]
.. Reduce # -----------                                                                    
... R-Optimise -> # -----------                                                                    
... F-  [L_COMMENTS, '# -----------', Is_Explicit=TRUE]
-> # -----------                                                                    
Unbounded> 
.. Parse # Null expression                                                              
... P-#
... F-  [L_COMMENTS, '# Null expression', Is_Explicit=TRUE]
.. Reduce # Null expression                                                                
... R-Optimise -> # Null expression                                                                
... F-  [L_COMMENTS, '# Null expression', Is_Explicit=TRUE]
-> # Null expression                                                                
Unbounded> 
.. Parse # Simple expression                                                             
... P-#
... F-  [L_COMMENTS, '# Simple expression', Is_Explicit=TRUE]
.. Reduce # Simple expression                                                              
... R-Optimise -> # Simple expression                                                              
... F-  [L_COMMENTS, '# Simple expression', Is_Explicit=TRUE]
-> # Simple expression                                                              
Unbounded> 
.. Parse abcde                                                                           
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-Variable: d
... P-Variable: e
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, e, Is_Explicit=TRUE]
.. Reduce (abcde)
... R-Optimise -> (abcde)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, e, Is_Explicit=TRUE]
-> (abcde)
Unbounded> 
.. Parse # Whitespace removal                                                            
... P-#
... F-  [L_COMMENTS, '# Whitespace removal', Is_Explicit=TRUE]
.. Reduce # Whitespace removal                                                             
... R-Optimise -> # Whitespace removal                                                             
... F-  [L_COMMENTS, '# Whitespace removal', Is_Explicit=TRUE]
-> # Whitespace removal                                                             
Unbounded> 
.. Parse a b c d e                                                                       
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-Variable: d
... P-Variable: e
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, e, Is_Explicit=TRUE]
.. Reduce (abcde)
... R-Optimise -> (abcde)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, e, Is_Explicit=TRUE]
-> (abcde)
Unbounded> 
.. Parse a	b	c	d	e                                                                       
... P-Variable: a
LAMBDA.SYNTAX_ERROR: Invalid character in a	b	c	d	e
Unbounded> 
.. Parse a_b_c_d_e                                                                       
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-Variable: d
... P-Variable: e
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, e, Is_Explicit=TRUE]
.. Reduce (abcde)
... R-Optimise -> (abcde)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, e, Is_Explicit=TRUE]
-> (abcde)
Unbounded> 
.. Parse a b	 c_d_e                                                                      
... P-Variable: a
... P-Variable: b
LAMBDA.SYNTAX_ERROR: Invalid character in a b	 c_d_e
Unbounded> 
.. Parse a _	bcde                                                                        
... P-Variable: a
LAMBDA.SYNTAX_ERROR: Invalid character in a _	bcde
Unbounded> 
.. Parse # Nested expression                                                             
... P-#
... F-  [L_COMMENTS, '# Nested expression', Is_Explicit=TRUE]
.. Reduce # Nested expression                                                              
... R-Optimise -> # Nested expression                                                              
... F-  [L_COMMENTS, '# Nested expression', Is_Explicit=TRUE]
-> # Nested expression                                                              
Unbounded> 
.. Parse (abc)                                                                           
... P-(
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P-)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
.. Reduce ((abc))
... R-Optimise -> (abc)
... F-  [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
-> (abc)
Unbounded> 
.. Parse (abc)de                                                                         
... P-(
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P-)
... P-Variable: d
... P-Variable: e
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, e, Is_Explicit=TRUE]
.. Reduce ((abc)de)
... R-Optimise -> ((abc)de)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_VARIABLE, e, Is_Explicit=TRUE]
-> ((abc)de)
Unbounded> 
.. Parse abc(de(fg))                                                                     
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-(
... P- Variable: d
... P- Variable: e
... P- (
... P-  Variable: f
... P-  Variable: g
... P- )
... P-)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, f, Is_Explicit=TRUE]
... F-     [L_VARIABLE, g, Is_Explicit=TRUE]
.. Reduce (abc(de(fg)))
... R-Optimise -> (abc(de(fg)))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, f, Is_Explicit=TRUE]
... F-     [L_VARIABLE, g, Is_Explicit=TRUE]
-> (abc(de(fg)))
Unbounded> 
.. Parse abc(de(fg))hijk                                                                 
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-(
... P- Variable: d
... P- Variable: e
... P- (
... P-  Variable: f
... P-  Variable: g
... P- )
... P-)
... P-Variable: h
... P-Variable: i
... P-Variable: j
... P-Variable: k
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, f, Is_Explicit=TRUE]
... F-     [L_VARIABLE, g, Is_Explicit=TRUE]
... F-   [L_VARIABLE, h, Is_Explicit=TRUE]
... F-   [L_VARIABLE, i, Is_Explicit=TRUE]
... F-   [L_VARIABLE, j, Is_Explicit=TRUE]
... F-   [L_VARIABLE, k, Is_Explicit=TRUE]
.. Reduce (abc(de(fg))hijk)
... R-Optimise -> (abc(de(fg))hijk)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, f, Is_Explicit=TRUE]
... F-     [L_VARIABLE, g, Is_Explicit=TRUE]
... F-   [L_VARIABLE, h, Is_Explicit=TRUE]
... F-   [L_VARIABLE, i, Is_Explicit=TRUE]
... F-   [L_VARIABLE, j, Is_Explicit=TRUE]
... F-   [L_VARIABLE, k, Is_Explicit=TRUE]
-> (abc(de(fg))hijk)
Unbounded> 
.. Parse abc(de(fgh)i)jk                                                                 
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-(
... P- Variable: d
... P- Variable: e
... P- (
... P-  Variable: f
... P-  Variable: g
... P-  Variable: h
... P- )
... P- Variable: i
... P-)
... P-Variable: j
... P-Variable: k
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, f, Is_Explicit=TRUE]
... F-     [L_VARIABLE, g, Is_Explicit=TRUE]
... F-     [L_VARIABLE, h, Is_Explicit=TRUE]
... F-    [L_VARIABLE, i, Is_Explicit=TRUE]
... F-   [L_VARIABLE, j, Is_Explicit=TRUE]
... F-   [L_VARIABLE, k, Is_Explicit=TRUE]
.. Reduce (abc(de(fgh)i)jk)
... R-Optimise -> (abc(de(fgh)i)jk)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, f, Is_Explicit=TRUE]
... F-     [L_VARIABLE, g, Is_Explicit=TRUE]
... F-     [L_VARIABLE, h, Is_Explicit=TRUE]
... F-    [L_VARIABLE, i, Is_Explicit=TRUE]
... F-   [L_VARIABLE, j, Is_Explicit=TRUE]
... F-   [L_VARIABLE, k, Is_Explicit=TRUE]
-> (abc(de(fgh)i)jk)
Unbounded> 
.. Parse a(b(c(d(e(f(g))))))                                                             
... P-Variable: a
... P-(
... P- Variable: b
... P- (
... P-  Variable: c
... P-  (
... P-   Variable: d
... P-   (
... P-    Variable: e
... P-    (
... P-     Variable: f
... P-     (
... P-      Variable: g
... P-     )
... P-    )
... P-   )
... P-  )
... P- )
... P-)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, c, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_VARIABLE, d, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-       [L_VARIABLE, e, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, f, Is_Explicit=TRUE]
... F-        [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-         [L_VARIABLE, g, Is_Explicit=TRUE]
.. Reduce (a(b(c(d(e(f(g)))))))
... R-Optimise -> (a(b(c(d(e(f(g)))))))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, c, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_VARIABLE, d, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-       [L_VARIABLE, e, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, f, Is_Explicit=TRUE]
... F-        [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-         [L_VARIABLE, g, Is_Explicit=TRUE]
-> (a(b(c(d(e(f(g)))))))
Unbounded> 
.. Parse abc()d                                                                          
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-(
... P-)
... P-Variable: d
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
.. Reduce (abc()d)
... R-Optimise -> (abcd)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
-> (abcd)
Unbounded> 
.. Parse (abc()d)                                                                        
... P-(
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P- (
... P- )
... P- Variable: d
... P-)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
.. Reduce ((abc()d))
... R-Optimise -> (abcd)
... F-  [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_VARIABLE, d, Is_Explicit=TRUE]
-> (abcd)
Unbounded> 
.. Parse (abc(d((e()))f)g(h))                                                            
... P-(
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P- (
... P-  Variable: d
... P-  (
... P-   (
... P-    Variable: e
... P-    (
... P-    )
... P-   )
... P-  )
... P-  Variable: f
... P- )
... P- Variable: g
... P- (
... P-  Variable: h
... P- )
... P-)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-       [L_VARIABLE, e, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, f, Is_Explicit=TRUE]
... F-    [L_VARIABLE, g, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, h, Is_Explicit=TRUE]
.. Reduce ((abc(d((e()))f)g(h)))
... R-Optimise -> (abc(d(e)f)g(h))
... F-  [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-   [L_VARIABLE, g, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, h, Is_Explicit=TRUE]
-> (abc(d(e)f)g(h))
Unbounded> 
.. Parse # Application                                                                   
... P-#
... F-  [L_COMMENTS, '# Application', Is_Explicit=TRUE]
.. Reduce # Application                                                                    
... R-Optimise -> # Application                                                                    
... F-  [L_COMMENTS, '# Application', Is_Explicit=TRUE]
-> # Application                                                                    
Unbounded> 
.. Parse abc(def)(gh)ijk                                                                 
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-(
... P- Variable: d
... P- Variable: e
... P- Variable: f
... P-)
... P-(
... P- Variable: g
... P- Variable: h
... P-)
... P-Variable: i
... P-Variable: j
... P-Variable: k
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, g, Is_Explicit=TRUE]
... F-    [L_VARIABLE, h, Is_Explicit=TRUE]
... F-   [L_VARIABLE, i, Is_Explicit=TRUE]
... F-   [L_VARIABLE, j, Is_Explicit=TRUE]
... F-   [L_VARIABLE, k, Is_Explicit=TRUE]
.. Reduce (abc(def)(gh)ijk)
... R-Optimise -> (abc(def)(gh)ijk)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_VARIABLE, a, Is_Explicit=TRUE]
... F-   [L_VARIABLE, b, Is_Explicit=TRUE]
... F-   [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, g, Is_Explicit=TRUE]
... F-    [L_VARIABLE, h, Is_Explicit=TRUE]
... F-   [L_VARIABLE, i, Is_Explicit=TRUE]
... F-   [L_VARIABLE, j, Is_Explicit=TRUE]
... F-   [L_VARIABLE, k, Is_Explicit=TRUE]
-> (abc(def)(gh)ijk)
Unbounded> 
.. Parse III # identity of identity of identity                                          
... P-Synonym: I
... P-Synonym: I
... P-Synonym: I
... P-#
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_SYNONYM, I, Is_Explicit=TRUE]
... F-   [L_SYNONYM, I, Is_Explicit=TRUE]
... F-   [L_SYNONYM, I, Is_Explicit=TRUE]
... F-  [L_COMMENTS, '# identity of identity of identity', Is_Explicit=TRUE]
.. Reduce (III) # identity of identity of identity                                               
... R-Optimise -> (III) # identity of identity of identity                                               
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_SYNONYM, I, Is_Explicit=TRUE]
... F-   [L_SYNONYM, I, Is_Explicit=TRUE]
... F-   [L_SYNONYM, I, Is_Explicit=TRUE]
... F-  [L_COMMENTS, '# identity of identity of identity', Is_Explicit=TRUE]
-> (III) # identity of identity of identity                                               
Unbounded> 
.. Parse (abc)(def)I                                                                     
... P-(
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P-)
... P-(
... P- Variable: d
... P- Variable: e
... P- Variable: f
... P-)
... P-Synonym: I
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-   [L_SYNONYM, I, Is_Explicit=TRUE]
.. Reduce ((abc)(def)I)
... R-Optimise -> ((abc)(def)I)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-   [L_SYNONYM, I, Is_Explicit=TRUE]
-> ((abc)(def)I)
Unbounded> 
.. Parse (abc)J(def)                                                                     
... P-(
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P-)
... P-Synonym: J
... P-(
... P- Variable: d
... P- Variable: e
... P- Variable: f
... P-)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_SYNONYM, J, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
.. Reduce ((abc)J(def))
... R-Optimise -> ((abc)J(def))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-   [L_SYNONYM, J, Is_Explicit=TRUE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
-> ((abc)J(def))
Unbounded> 
.. Parse # Syntax error - Unexpected parenthesis error                                   
... P-#
... F-  [L_COMMENTS, '# Syntax error - Unexpected parenthesis error', Is_Explicit=TRUE]
.. Reduce # Syntax error - Unexpected parenthesis error                                    
... R-Optimise -> # Syntax error - Unexpected parenthesis error                                    
... F-  [L_COMMENTS, '# Syntax error - Unexpected parenthesis error', Is_Explicit=TRUE]
-> # Syntax error - Unexpected parenthesis error                                    
Unbounded> 
.. Parse abc)                                                                            
... P-Variable: a
... P-Variable: b
... P-Variable: c
LAMBDA.SYNTAX_ERROR: Unmatched ')' in abc)
Unbounded> 
.. Parse abc)de                                                                          
... P-Variable: a
... P-Variable: b
... P-Variable: c
LAMBDA.SYNTAX_ERROR: Unmatched ')' in abc)de
Unbounded> 
.. Parse abc(de))fg                                                                      
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-(
... P- Variable: d
... P- Variable: e
... P-)
LAMBDA.SYNTAX_ERROR: Unmatched ')' in abc(de))fg
Unbounded> 
.. Parse # Syntax error - Missing parenthesis                                            
... P-#
... F-  [L_COMMENTS, '# Syntax error - Missing parenthesis', Is_Explicit=TRUE]
.. Reduce # Syntax error - Missing parenthesis                                             
... R-Optimise -> # Syntax error - Missing parenthesis                                             
... F-  [L_COMMENTS, '# Syntax error - Missing parenthesis', Is_Explicit=TRUE]
-> # Syntax error - Missing parenthesis                                             
Unbounded> 
.. Parse (abc                                                                            
... P-(
... P- Variable: a
... P- Variable: b
... P- Variable: c
LAMBDA.SYNTAX_ERROR: Missing ')' in (abc
Unbounded> 
.. Parse abc(def(gh)ijk                                                                  
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-(
... P- Variable: d
... P- Variable: e
... P- Variable: f
... P- (
... P-  Variable: g
... P-  Variable: h
... P- )
... P- Variable: i
... P- Variable: j
... P- Variable: k
LAMBDA.SYNTAX_ERROR: Missing ')' in abc(def(gh)ijk
Unbounded> 
.. Parse abc(def(gh)                                                                     
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-(
... P- Variable: d
... P- Variable: e
... P- Variable: f
... P- (
... P-  Variable: g
... P-  Variable: h
... P- )
LAMBDA.SYNTAX_ERROR: Missing ')' in abc(def(gh)
Unbounded> 
.. Parse 
.. Reduce 
... R-Optimise -> 
-> 
Unbounded> 
.. Parse # Functions                                                                     
... P-#
... F-  [L_COMMENTS, '# Functions', Is_Explicit=TRUE]
.. Reduce # Functions                                                                      
... R-Optimise -> # Functions                                                                      
... F-  [L_COMMENTS, '# Functions', Is_Explicit=TRUE]
-> # Functions                                                                      
Unbounded> 
.. Parse # ---------                                                                     
... P-#
... F-  [L_COMMENTS, '# ---------', Is_Explicit=TRUE]
.. Reduce # ---------                                                                      
... R-Optimise -> # ---------                                                                      
... F-  [L_COMMENTS, '# ---------', Is_Explicit=TRUE]
-> # ---------                                                                      
Unbounded> 
.. Parse # Simple functions                                                              
... P-#
... F-  [L_COMMENTS, '# Simple functions', Is_Explicit=TRUE]
.. Reduce # Simple functions                                                               
... R-Optimise -> # Simple functions                                                               
... F-  [L_COMMENTS, '# Simple functions', Is_Explicit=TRUE]
-> # Simple functions                                                               
Unbounded> 
.. Parse ?abc.de                                                                         
... P-Function - Variables
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P-Function - Expression
... P- Variable: d
... P- Variable: e
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
... F-     [L_VARIABLE, e, Is_Explicit=TRUE]
.. Reduce (?abc.(de))
... R-Optimise -> (?abc.(de))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
... F-     [L_VARIABLE, e, Is_Explicit=TRUE]
-> (?abc.(de))
Unbounded> 
.. Parse &abc.de                                                                         
... P-Function - Variables
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P-Function - Expression
... P- Variable: d
... P- Variable: e
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, &, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
... F-     [L_VARIABLE, e, Is_Explicit=TRUE]
.. Reduce (&abc.(de))
... R-Optimise -> (&abc.(de))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, &, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
... F-     [L_VARIABLE, e, Is_Explicit=TRUE]
-> (&abc.(de))
Unbounded> 
.. Parse \abc.de                                                                         
... P-Function - Variables
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P-Function - Expression
... P- Variable: d
... P- Variable: e
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, \, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
... F-     [L_VARIABLE, e, Is_Explicit=TRUE]
.. Reduce (\abc.(de))
... R-Optimise -> (\abc.(de))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, \, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
... F-     [L_VARIABLE, e, Is_Explicit=TRUE]
-> (\abc.(de))
Unbounded> 
.. Parse # Statement optimisation                                                        
... P-#
... F-  [L_COMMENTS, '# Statement optimisation', Is_Explicit=TRUE]
.. Reduce # Statement optimisation                                                         
... R-Optimise -> # Statement optimisation                                                         
... F-  [L_COMMENTS, '# Statement optimisation', Is_Explicit=TRUE]
-> # Statement optimisation                                                         
Unbounded> 
.. Parse ?x.ab(c()d)                                                                     
... P-Function - Variables
... P- Variable: x
... P-Function - Expression
... P- Variable: a
... P- Variable: b
... P- (
... P-  Variable: c
... P-  (
... P-  )
... P-  Variable: d
... P- )
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, a, Is_Explicit=TRUE]
... F-     [L_VARIABLE, b, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_VARIABLE, c, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_VARIABLE, d, Is_Explicit=TRUE]
.. Reduce (?x.(ab(c()d)))
... R-Optimise -> (?x.(ab(cd)))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, a, Is_Explicit=TRUE]
... F-     [L_VARIABLE, b, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_VARIABLE, c, Is_Explicit=TRUE]
... F-      [L_VARIABLE, d, Is_Explicit=TRUE]
-> (?x.(ab(cd)))
Unbounded> 
.. Parse (?x.((abc)de()))                                                                
... P-(
... P- Function - Variables
... P-  Variable: x
... P- Function - Expression
... P-  (
... P-   (
... P-    Variable: a
... P-    Variable: b
... P-    Variable: c
... P-   )
... P-   Variable: d
... P-   Variable: e
... P-   (
... P-   )
... P-  )
... P- .
... P-)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-       [L_VARIABLE, a, Is_Explicit=TRUE]
... F-       [L_VARIABLE, b, Is_Explicit=TRUE]
... F-       [L_VARIABLE, c, Is_Explicit=TRUE]
... F-      [L_VARIABLE, d, Is_Explicit=TRUE]
... F-      [L_VARIABLE, e, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, (, Is_Explicit=TRUE]
.. Reduce ((?x.((abc)de())))
... R-Optimise -> (?x.((abc)de))
... F-  [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_VARIABLE, a, Is_Explicit=TRUE]
... F-      [L_VARIABLE, b, Is_Explicit=TRUE]
... F-      [L_VARIABLE, c, Is_Explicit=TRUE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
... F-     [L_VARIABLE, e, Is_Explicit=TRUE]
-> (?x.((abc)de))
Unbounded> 
.. Parse (?x.a(b()c))                                                                    
... P-(
... P- Function - Variables
... P-  Variable: x
... P- Function - Expression
... P-  Variable: a
... P-  (
... P-   Variable: b
... P-   (
... P-   )
... P-   Variable: c
... P-  )
... P- .
... P-)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-      [L_VARIABLE, a, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-       [L_VARIABLE, b, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-       [L_VARIABLE, c, Is_Explicit=TRUE]
.. Reduce ((?x.(a(b()c))))
... R-Optimise -> (?x.(a(bc)))
... F-  [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, a, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_VARIABLE, b, Is_Explicit=TRUE]
... F-      [L_VARIABLE, c, Is_Explicit=TRUE]
-> (?x.(a(bc)))
Unbounded> 
.. Parse # Standard functions                                                            
... P-#
... F-  [L_COMMENTS, '# Standard functions', Is_Explicit=TRUE]
.. Reduce # Standard functions                                                             
... R-Optimise -> # Standard functions                                                             
... F-  [L_COMMENTS, '# Standard functions', Is_Explicit=TRUE]
-> # Standard functions                                                             
Unbounded> 
.. Parse ?x.x                                                                            
... P-Function - Variables
... P- Variable: x
... P-Function - Expression
... P- Variable: x
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
.. Reduce (?x.(x))
... R-Optimise -> (?x.(x))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
-> (?x.(x))
Unbounded> 
.. Parse &x.x                                                                            
... P-Function - Variables
... P- Variable: x
... P-Function - Expression
... P- Variable: x
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, &, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
.. Reduce (&x.(x))
... R-Optimise -> (&x.(x))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, &, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
-> (&x.(x))
Unbounded> 
.. Parse \x.x                                                                            
... P-Function - Variables
... P- Variable: x
... P-Function - Expression
... P- Variable: x
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, \, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
.. Reduce (\x.(x))
... R-Optimise -> (\x.(x))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, \, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
-> (\x.(x))
Unbounded> 
.. Parse (?x.x)                                                                          
... P-(
... P- Function - Variables
... P-  Variable: x
... P- Function - Expression
... P-  Variable: x
... P- .
... P-)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
.. Reduce ((?x.(x)))
... R-Optimise -> (?x.(x))
... F-  [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
-> (?x.(x))
Unbounded> 
.. Parse ?f.(?x.f(xx))(?x.f(xx))                                                         
... P-Function - Variables
... P- Variable: f
... P-Function - Expression
... P- (
... P-  Function - Variables
... P-   Variable: x
... P-  Function - Expression
... P-   Variable: f
... P-   (
... P-    Variable: x
... P-    Variable: x
... P-   )
... P-  .
... P- )
... P- (
... P-  Function - Variables
... P-   Variable: x
... P-  Function - Expression
... P-   Variable: f
... P-   (
... P-    Variable: x
... P-    Variable: x
... P-   )
... P-  .
... P- )
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
.. Reduce (?f.(?x.(f(xx)))(?x.(f(xx))))
... R-Optimise -> (?f.(?x.(f(xx)))(?x.(f(xx))))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
-> (?f.(?x.(f(xx)))(?x.(f(xx))))
Unbounded> 
.. Parse &f.(&x.f(xx))(&x.f(xx))                                                         
... P-Function - Variables
... P- Variable: f
... P-Function - Expression
... P- (
... P-  Function - Variables
... P-   Variable: x
... P-  Function - Expression
... P-   Variable: f
... P-   (
... P-    Variable: x
... P-    Variable: x
... P-   )
... P-  .
... P- )
... P- (
... P-  Function - Variables
... P-   Variable: x
... P-  Function - Expression
... P-   Variable: f
... P-   (
... P-    Variable: x
... P-    Variable: x
... P-   )
... P-  .
... P- )
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, &, Is_Explicit=FALSE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, &, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, &, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
.. Reduce (&f.(&x.(f(xx)))(&x.(f(xx))))
... R-Optimise -> (&f.(&x.(f(xx)))(&x.(f(xx))))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, &, Is_Explicit=FALSE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, &, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, &, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
-> (&f.(&x.(f(xx)))(&x.(f(xx))))
Unbounded> 
.. Parse \f.(\x.f(xx))(\x.f(xx))                                                         
... P-Function - Variables
... P- Variable: f
... P-Function - Expression
... P- (
... P-  Function - Variables
... P-   Variable: x
... P-  Function - Expression
... P-   Variable: f
... P-   (
... P-    Variable: x
... P-    Variable: x
... P-   )
... P-  .
... P- )
... P- (
... P-  Function - Variables
... P-   Variable: x
... P-  Function - Expression
... P-   Variable: f
... P-   (
... P-    Variable: x
... P-    Variable: x
... P-   )
... P-  .
... P- )
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, \, Is_Explicit=FALSE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, \, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, \, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
.. Reduce (\f.(\x.(f(xx)))(\x.(f(xx))))
... R-Optimise -> (\f.(\x.(f(xx)))(\x.(f(xx))))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, \, Is_Explicit=FALSE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, \, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, \, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
-> (\f.(\x.(f(xx)))(\x.(f(xx))))
Unbounded> 
.. Parse &f.(?x.f(xx))(\x.f(xx))                                                         
... P-Function - Variables
... P- Variable: f
... P-Function - Expression
... P- (
... P-  Function - Variables
... P-   Variable: x
... P-  Function - Expression
... P-   Variable: f
... P-   (
... P-    Variable: x
... P-    Variable: x
... P-   )
... P-  .
... P- )
... P- (
... P-  Function - Variables
... P-   Variable: x
... P-  Function - Expression
... P-   Variable: f
... P-   (
... P-    Variable: x
... P-    Variable: x
... P-   )
... P-  .
... P- )
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, &, Is_Explicit=FALSE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, \, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
.. Reduce (&f.(?x.(f(xx)))(\x.(f(xx))))
... R-Optimise -> (&f.(?x.(f(xx)))(\x.(f(xx))))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, &, Is_Explicit=FALSE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, \, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, f, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
... F-        [L_VARIABLE, x, Is_Explicit=TRUE]
-> (&f.(?x.(f(xx)))(\x.(f(xx))))
Unbounded> 
.. Parse # Unbounded variables                                                           
... P-#
... F-  [L_COMMENTS, '# Unbounded variables', Is_Explicit=TRUE]
.. Reduce # Unbounded variables                                                            
... R-Optimise -> # Unbounded variables                                                            
... F-  [L_COMMENTS, '# Unbounded variables', Is_Explicit=TRUE]
-> # Unbounded variables                                                            
Unbounded> 
.. Parse ?x.xy                                                                           
... P-Function - Variables
... P- Variable: x
... P-Function - Expression
... P- Variable: x
... P- Variable: y
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
... F-     [L_VARIABLE, y, Is_Explicit=TRUE]
.. Reduce (?x.(xy))
... R-Optimise -> (?x.(xy))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
... F-     [L_VARIABLE, y, Is_Explicit=TRUE]
-> (?x.(xy))
Unbounded> 
.. Parse ?xy.x                                                                           
... P-Function - Variables
... P- Variable: x
... P- Variable: y
... P-Function - Expression
... P- Variable: x
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_VARIABLE, y, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
.. Reduce (?xy.(x))
... R-Optimise -> (?xy.(x))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_VARIABLE, y, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
-> (?xy.(x))
Unbounded> 
.. Parse # Warning - Null function - Are these valid Lambda syntax or is this an overkill
... P-#
... F-  [L_COMMENTS, '# Warning - Null function - Are these valid Lambda syntax or is this an overkill', Is_Explicit=TRUE]
.. Reduce # Warning - Null function - Are these valid Lambda syntax or is this an overkill 
... R-Optimise -> # Warning - Null function - Are these valid Lambda syntax or is this an overkill 
... F-  [L_COMMENTS, '# Warning - Null function - Are these valid Lambda syntax or is this an overkill', Is_Explicit=TRUE]
-> # Warning - Null function - Are these valid Lambda syntax or is this an overkill 
Unbounded> 
.. Parse ?abc                                                                            
... P-Function - Variables
... P- Variable: a
... P- Variable: b
... P- Variable: c
LAMBDA.SYNTAX_ERROR: Malformed function declaration in ?abc
Unbounded> 
.. Parse ?                                                                               
... P-Function - Variables
LAMBDA.SYNTAX_ERROR: Malformed function declaration in ?
Unbounded> 
.. Parse ?(abc)                                                                          
... P-Function - Variables
LAMBDA.SYNTAX_ERROR: Malformed function declaration in ?(abc)
Unbounded> 
.. Parse ?x.()                                                                           
... P-Function - Variables
... P- Variable: x
... P-Function - Expression
... P- (
... P- )
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
.. Reduce (?x.())
... R-Optimise -> (?x)
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
LAMBDA.PROGRAM_ERROR: Malformed function declaration in (?x)
Unbounded> 
.. Parse # Syntax error - Missing lambda                                                 
... P-#
... F-  [L_COMMENTS, '# Syntax error - Missing lambda', Is_Explicit=TRUE]
.. Reduce # Syntax error - Missing lambda                                                  
... R-Optimise -> # Syntax error - Missing lambda                                                  
... F-  [L_COMMENTS, '# Syntax error - Missing lambda', Is_Explicit=TRUE]
-> # Syntax error - Missing lambda                                                  
Unbounded> 
.. Parse abc.de                                                                          
... P-Variable: a
... P-Variable: b
... P-Variable: c
LAMBDA.SYNTAX_ERROR: Unexpected '.' - no function declared in abc.de
Unbounded> 
.. Parse 
.. Reduce 
... R-Optimise -> 
-> 
Unbounded> 
.. Parse # Synonyms                                                                      
... P-#
... F-  [L_COMMENTS, '# Synonyms', Is_Explicit=TRUE]
.. Reduce # Synonyms                                                                       
... R-Optimise -> # Synonyms                                                                       
... F-  [L_COMMENTS, '# Synonyms', Is_Explicit=TRUE]
-> # Synonyms                                                                       
Unbounded> 
.. Parse # --------                                                                      
... P-#
... F-  [L_COMMENTS, '# --------', Is_Explicit=TRUE]
.. Reduce # --------                                                                       
... R-Optimise -> # --------                                                                       
... F-  [L_COMMENTS, '# --------', Is_Explicit=TRUE]
-> # --------                                                                       
Unbounded> 
.. Parse # Assignment - dummy values                                                     
... P-#
... F-  [L_COMMENTS, '# Assignment - dummy values', Is_Explicit=TRUE]
.. Reduce # Assignment - dummy values                                                      
... R-Optimise -> # Assignment - dummy values                                                      
... F-  [L_COMMENTS, '# Assignment - dummy values', Is_Explicit=TRUE]
-> # Assignment - dummy values                                                      
Unbounded> 
.. Parse A=                                                                              
... P-Synonym: A
... P-= 
... F-  [L_DEFINITION, A, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
.. Reduce A=()
... R-Optimise -> A=
... F-  [L_DEFINITION, A, Is_Explicit=FALSE]
-> A=
Unbounded> 
.. Parse B=abcdef                                                                        
... P-Synonym: B
... P-= 
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-Variable: d
... P-Variable: e
... P-Variable: f
... F-  [L_DEFINITION, B, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
.. Reduce B=(abcdef)
... R-Optimise -> B=(abcdef)
... F-  [L_DEFINITION, B, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
-> B=(abcdef)
Unbounded> 
.. Parse C=?abc.defg                                                                     
... P-Synonym: C
... P-= 
... P-Function - Variables
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P-Function - Expression
... P- Variable: d
... P- Variable: e
... P- Variable: f
... P- Variable: g
... F-  [L_DEFINITION, C, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-     [L_VARIABLE, a, Is_Explicit=TRUE]
... F-     [L_VARIABLE, b, Is_Explicit=TRUE]
... F-     [L_VARIABLE, c, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-      [L_VARIABLE, d, Is_Explicit=TRUE]
... F-      [L_VARIABLE, e, Is_Explicit=TRUE]
... F-      [L_VARIABLE, f, Is_Explicit=TRUE]
... F-      [L_VARIABLE, g, Is_Explicit=TRUE]
.. Reduce C=(?abc.(defg))
... R-Optimise -> C=(?abc.(defg))
... F-  [L_DEFINITION, C, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-     [L_VARIABLE, a, Is_Explicit=TRUE]
... F-     [L_VARIABLE, b, Is_Explicit=TRUE]
... F-     [L_VARIABLE, c, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-      [L_VARIABLE, d, Is_Explicit=TRUE]
... F-      [L_VARIABLE, e, Is_Explicit=TRUE]
... F-      [L_VARIABLE, f, Is_Explicit=TRUE]
... F-      [L_VARIABLE, g, Is_Explicit=TRUE]
-> C=(?abc.(defg))
Unbounded> 
.. Parse D=# Delete D                                                                    
... P-Synonym: D
... P-= 
... P-#
... F-  [L_DEFINITION, D, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_COMMENTS, '# Delete D', Is_Explicit=TRUE]
.. Reduce D=() # Delete D                                                                       
... R-Optimise -> D= # Delete D                                                                       
... F-  [L_DEFINITION, D, Is_Explicit=FALSE]
... F-   [L_COMMENTS, '# Delete D', Is_Explicit=TRUE]
-> D= # Delete D                                                                       
Unbounded> 
.. Parse E= # Delete E                                                                   
... P-Synonym: E
... P-= 
... P-#
... F-  [L_DEFINITION, E, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_COMMENTS, '# Delete E', Is_Explicit=TRUE]
.. Reduce E=() # Delete E                                                                       
... R-Optimise -> E= # Delete E                                                                       
... F-  [L_DEFINITION, E, Is_Explicit=FALSE]
... F-   [L_COMMENTS, '# Delete E', Is_Explicit=TRUE]
-> E= # Delete E                                                                       
Unbounded> 
.. Parse F=(abc)def                                                                      
... P-Synonym: F
... P-= 
... P-(
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P-)
... P-Variable: d
... P-Variable: e
... P-Variable: f
... F-  [L_DEFINITION, F, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, a, Is_Explicit=TRUE]
... F-     [L_VARIABLE, b, Is_Explicit=TRUE]
... F-     [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
.. Reduce F=((abc)def)
... R-Optimise -> F=((abc)def)
... F-  [L_DEFINITION, F, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, a, Is_Explicit=TRUE]
... F-     [L_VARIABLE, b, Is_Explicit=TRUE]
... F-     [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
-> F=((abc)def)
Unbounded> 
.. Parse G=H                                                                             
... P-Synonym: G
... P-= 
... P-Synonym: H
... F-  [L_DEFINITION, G, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_SYNONYM, H, Is_Explicit=TRUE]
.. Reduce G=(H)
... R-Optimise -> G=(H)
... F-  [L_DEFINITION, G, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_SYNONYM, H, Is_Explicit=TRUE]
-> G=(H)
Unbounded> 
.. Parse I=ab(cd)                                                                        
... P-Synonym: I
... P-= 
... P-Variable: a
... P-Variable: b
... P-(
... P- Variable: c
... P- Variable: d
... P-)
... F-  [L_DEFINITION, I, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, c, Is_Explicit=TRUE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
.. Reduce I=(ab(cd))
... R-Optimise -> I=(ab(cd))
... F-  [L_DEFINITION, I, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, c, Is_Explicit=TRUE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
-> I=(ab(cd))
Unbounded> 
.. Parse J=ab(cd)e                                                                       
... P-Synonym: J
... P-= 
... P-Variable: a
... P-Variable: b
... P-(
... P- Variable: c
... P- Variable: d
... P-)
... P-Variable: e
... F-  [L_DEFINITION, J, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, c, Is_Explicit=TRUE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
.. Reduce J=(ab(cd)e)
... R-Optimise -> J=(ab(cd)e)
... F-  [L_DEFINITION, J, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, c, Is_Explicit=TRUE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
-> J=(ab(cd)e)
Unbounded> 
.. Parse K=ab(?c.d)e                                                                     
... P-Synonym: K
... P-= 
... P-Variable: a
... P-Variable: b
... P-(
... P- Function - Variables
... P-  Variable: c
... P- Function - Expression
... P-  Variable: d
... P- .
... P-)
... P-Variable: e
... F-  [L_DEFINITION, K, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-      [L_VARIABLE, c, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
.. Reduce K=(ab(?c.(d))e)
... R-Optimise -> K=(ab(?c.(d))e)
... F-  [L_DEFINITION, K, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-      [L_VARIABLE, c, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-       [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, e, Is_Explicit=TRUE]
-> K=(ab(?c.(d))e)
Unbounded> 
.. Parse L = asdf # space reduction                                                      
... P-Synonym: L
... P-= 
... P-Variable: a
... P-Variable: s
... P-Variable: d
... P-Variable: f
... P-#
... F-  [L_DEFINITION, L, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, s, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-   [L_COMMENTS, '# space reduction', Is_Explicit=TRUE]
.. Reduce L=(asdf) # space reduction                                                                
... R-Optimise -> L=(asdf) # space reduction                                                                
... F-  [L_DEFINITION, L, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, s, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-    [L_VARIABLE, f, Is_Explicit=TRUE]
... F-   [L_COMMENTS, '# space reduction', Is_Explicit=TRUE]
-> L=(asdf) # space reduction                                                                
Unbounded> 
.. Parse 
.. Reduce 
... R-Optimise -> 
-> 
Unbounded> 
.. Parse # Assignment - standard functions                                               
... P-#
... F-  [L_COMMENTS, '# Assignment - standard functions', Is_Explicit=TRUE]
.. Reduce # Assignment - standard functions                                                
... R-Optimise -> # Assignment - standard functions                                                
... F-  [L_COMMENTS, '# Assignment - standard functions', Is_Explicit=TRUE]
-> # Assignment - standard functions                                                
Unbounded> 
.. Parse I=?x.x # Identity                                                               
... P-Synonym: I
... P-= 
... P-Function - Variables
... P- Variable: x
... P-Function - Expression
... P- Variable: x
... P- #
... F-  [L_DEFINITION, I, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-   [L_COMMENTS, '# Identity', Is_Explicit=TRUE]
.. Reduce I=(?x.(x)) # Identity                                                                       
... R-Optimise -> I=(?x.(x)) # Identity                                                                       
... F-  [L_DEFINITION, I, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-      [L_VARIABLE, x, Is_Explicit=TRUE]
... F-   [L_COMMENTS, '# Identity', Is_Explicit=TRUE]
-> I=(?x.(x)) # Identity                                                                       
Unbounded> 
.. Parse Y=?f.(?x.f(xx))(?x.f(xx)) # Y Combinator                                        
... P-Synonym: Y
... P-= 
... P-Function - Variables
... P- Variable: f
... P-Function - Expression
... P- (
... P-  Function - Variables
... P-   Variable: x
... P-  Function - Expression
... P-   Variable: f
... P-   (
... P-    Variable: x
... P-    Variable: x
... P-   )
... P-  .
... P- )
... P- (
... P-  Function - Variables
... P-   Variable: x
... P-  Function - Expression
... P-   Variable: f
... P-   (
... P-    Variable: x
... P-    Variable: x
... P-   )
... P-  .
... P- )
... P- #
... F-  [L_DEFINITION, Y, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-     [L_VARIABLE, f, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-       [L_VARIABLE, x, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-        [L_VARIABLE, f, Is_Explicit=TRUE]
... F-        [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-         [L_VARIABLE, x, Is_Explicit=TRUE]
... F-         [L_VARIABLE, x, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-       [L_VARIABLE, x, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-        [L_VARIABLE, f, Is_Explicit=TRUE]
... F-        [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-         [L_VARIABLE, x, Is_Explicit=TRUE]
... F-         [L_VARIABLE, x, Is_Explicit=TRUE]
... F-   [L_COMMENTS, '# Y Combinator', Is_Explicit=TRUE]
.. Reduce Y=(?f.(?x.(f(xx)))(?x.(f(xx)))) # Y Combinator                                                                   
... R-Optimise -> Y=(?f.(?x.(f(xx)))(?x.(f(xx)))) # Y Combinator                                                                   
... F-  [L_DEFINITION, Y, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-     [L_VARIABLE, f, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-       [L_VARIABLE, x, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-        [L_VARIABLE, f, Is_Explicit=TRUE]
... F-        [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-         [L_VARIABLE, x, Is_Explicit=TRUE]
... F-         [L_VARIABLE, x, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-       [L_VARIABLE, x, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-        [L_VARIABLE, f, Is_Explicit=TRUE]
... F-        [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-         [L_VARIABLE, x, Is_Explicit=TRUE]
... F-         [L_VARIABLE, x, Is_Explicit=TRUE]
... F-   [L_COMMENTS, '# Y Combinator', Is_Explicit=TRUE]
-> Y=(?f.(?x.(f(xx)))(?x.(f(xx)))) # Y Combinator                                                                   
Unbounded> 
.. Parse 
.. Reduce 
... R-Optimise -> 
-> 
Unbounded> 
.. Parse # Assignment - statement optimisation                                           
... P-#
... F-  [L_COMMENTS, '# Assignment - statement optimisation', Is_Explicit=TRUE]
.. Reduce # Assignment - statement optimisation                                            
... R-Optimise -> # Assignment - statement optimisation                                            
... F-  [L_COMMENTS, '# Assignment - statement optimisation', Is_Explicit=TRUE]
-> # Assignment - statement optimisation                                            
Unbounded> 
.. Parse M= abc()d                                                                       
... P-Synonym: M
... P-= 
... P-Variable: a
... P-Variable: b
... P-Variable: c
... P-(
... P-)
... P-Variable: d
... F-  [L_DEFINITION, M, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
.. Reduce M=(abc()d)
... R-Optimise -> M=(abcd)
... F-  [L_DEFINITION, M, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
-> M=(abcd)
Unbounded> 
.. Parse N= (abc()d) # magical stuff                                                     
... P-Synonym: N
... P-= 
... P-(
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P- (
... P- )
... P- Variable: d
... P-)
... P-#
... F-  [L_DEFINITION, N, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, a, Is_Explicit=TRUE]
... F-     [L_VARIABLE, b, Is_Explicit=TRUE]
... F-     [L_VARIABLE, c, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_COMMENTS, '# magical stuff', Is_Explicit=TRUE]
.. Reduce N=((abc()d)) # magical stuff                                                                  
... R-Optimise -> N=(abcd) # magical stuff                                                                  
... F-  [L_DEFINITION, N, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_VARIABLE, d, Is_Explicit=TRUE]
... F-   [L_COMMENTS, '# magical stuff', Is_Explicit=TRUE]
-> N=(abcd) # magical stuff                                                                  
Unbounded> 
.. Parse O= (abc(d((e()))f)g(h))                                                         
... P-Synonym: O
... P-= 
... P-(
... P- Variable: a
... P- Variable: b
... P- Variable: c
... P- (
... P-  Variable: d
... P-  (
... P-   (
... P-    Variable: e
... P-    (
... P-    )
... P-   )
... P-  )
... P-  Variable: f
... P- )
... P- Variable: g
... P- (
... P-  Variable: h
... P- )
... P-)
... F-  [L_DEFINITION, O, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, a, Is_Explicit=TRUE]
... F-     [L_VARIABLE, b, Is_Explicit=TRUE]
... F-     [L_VARIABLE, c, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_VARIABLE, d, Is_Explicit=TRUE]
... F-      [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-       [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-        [L_VARIABLE, e, Is_Explicit=TRUE]
... F-        [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_VARIABLE, f, Is_Explicit=TRUE]
... F-     [L_VARIABLE, g, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_VARIABLE, h, Is_Explicit=TRUE]
.. Reduce O=((abc(d((e()))f)g(h)))
... R-Optimise -> O=(abc(d(e)f)g(h))
... F-  [L_DEFINITION, O, Is_Explicit=FALSE]
... F-   [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-    [L_VARIABLE, a, Is_Explicit=TRUE]
... F-    [L_VARIABLE, b, Is_Explicit=TRUE]
... F-    [L_VARIABLE, c, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, d, Is_Explicit=TRUE]
... F-     [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-      [L_VARIABLE, e, Is_Explicit=TRUE]
... F-     [L_VARIABLE, f, Is_Explicit=TRUE]
... F-    [L_VARIABLE, g, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, (, Is_Explicit=TRUE]
... F-     [L_VARIABLE, h, Is_Explicit=TRUE]
-> O=(abc(d(e)f)g(h))
Unbounded> 
.. Parse 
.. Reduce 
... R-Optimise -> 
-> 
Unbounded> 
.. Parse # Assignment - bad assignment                                                   
... P-#
... F-  [L_COMMENTS, '# Assignment - bad assignment', Is_Explicit=TRUE]
.. Reduce # Assignment - bad assignment                                                    
... R-Optimise -> # Assignment - bad assignment                                                    
... F-  [L_COMMENTS, '# Assignment - bad assignment', Is_Explicit=TRUE]
-> # Assignment - bad assignment                                                    
Unbounded> 
.. Parse ABC=abc                                                                         
... P-Synonym: A
... P-Synonym: B
... P-Synonym: C
LAMBDA.SYNTAX_ERROR: Unexpected Synonym assignment in ABC=abc
Unbounded> 
.. Parse A=B=C                                                                           
... P-Synonym: A
... P-= 
... P-Synonym: B
LAMBDA.SYNTAX_ERROR: Unexpected Synonym assignment in A=B=C
Unbounded> 
.. Parse a=bcd                                                                           
... P-Variable: a
LAMBDA.SYNTAX_ERROR: Unexpected Synonym assignment in a=bcd
Unbounded> 
.. Parse # Buffer overflow                                                               
... P-#
... F-  [L_COMMENTS, '# Buffer overflow', Is_Explicit=TRUE]
.. Reduce # Buffer overflow                                                                
... R-Optimise -> # Buffer overflow                                                                
... F-  [L_COMMENTS, '# Buffer overflow', Is_Explicit=TRUE]
-> # Buffer overflow                                                                
Unbounded> 
.. Parse ?x.x
... P-Function - Variables
... P- Variable: x
... P-Function - Expression
... P- Variable: x
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
.. Reduce (?x.(x))
... R-Optimise -> (?x.(x))
... F-  [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-   [L_FUNCTION, ?, Is_Explicit=FALSE]
... F-    [L_VARIABLE, x, Is_Explicit=TRUE]
... F-    [L_EXPRESSION, _, Is_Explicit=FALSE]
... F-     [L_VARIABLE, x, Is_Explicit=TRUE]
-> (?x.(x))
Unbounded> 
.. Parse ?x.
... P-Function - Variables
... P- Variable: x
PROGRAM_ERROR: Buffer overflow in ?x.
Unbounded> 
.. Parse ?x
... P-Function - Variables
... P- Variable: x
PROGRAM_ERROR: Buffer overflow in ?x
Unbounded> 
.. Parse ?
... P-Function - Variables
PROGRAM_ERROR: Buffer overflow in ?
Unbounded> 
.. Parse # Commands                                                                      
... P-#
... F-  [L_COMMENTS, '# Commands', Is_Explicit=TRUE]
.. Reduce # Commands                                                                       
... R-Optimise -> # Commands                                                                       
... F-  [L_COMMENTS, '# Commands', Is_Explicit=TRUE]
-> # Commands                                                                       
Unbounded> 
.. Parse # --------                                                                      
... P-#
... F-  [L_COMMENTS, '# --------', Is_Explicit=TRUE]
.. Reduce # --------                                                                       
... R-Optimise -> # --------                                                                       
... F-  [L_COMMENTS, '# --------', Is_Explicit=TRUE]
-> # --------                                                                       
Unbounded> 
.. List saved expressions
A=()
B=(abcdef)
C=(?abc.(defg))
D=() # Delete D                                                                       
E=() # Delete E                                                                       
F=((abc)def)
G=(H)
I=(?x.(x)) # Identity                                                                       
J=(ab(cd)e)
K=(ab(?c.(d))e)
L=(asdf) # space reduction                                                                
M=(abc()d)
N=((abc()d)) # magical stuff                                                                  
O=((abc(d((e()))f)g(h)))
Y=(?f.(?x.(f(xx)))(?x.(f(xx)))) # Y Combinator                                                                   
Unbounded> 
.. Remove synonym
.. Removing D=() # Delete D                                                                       
.. Removing E=() # Delete E                                                                       
Unbounded> 
.. List saved expressions
A=()
B=(abcdef)
C=(?abc.(defg))
F=((abc)def)
G=(H)
I=(?x.(x)) # Identity                                                                       
J=(ab(cd)e)
K=(ab(?c.(d))e)
L=(asdf) # space reduction                                                                
M=(abc()d)
N=((abc()d)) # magical stuff                                                                  
O=((abc(d((e()))f)g(h)))
Y=(?f.(?x.(f(xx)))(?x.(f(xx)))) # Y Combinator                                                                   
Unbounded> 
EXIT | QUIT     : Exit Unbounded
HELP            : Display this message
LS              : List all saved expressions
RM <symbol>     : Delete an expression
TRACE           : Display the tracing level
TRACE <feature> : Set verbose tracing [ON|OFF|PARSE|REDUCE|FORMAT]
Unbounded> 
.. Exit

Bye
